{
	"name": "DataFlowDimensions",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "MentoringSQLmoviesMovie",
						"type": "DatasetReference"
					},
					"name": "tMovies"
				},
				{
					"dataset": {
						"referenceName": "MentoringSQLmoviesMovieStatus",
						"type": "DatasetReference"
					},
					"name": "tStatus"
				},
				{
					"dataset": {
						"referenceName": "MentoringSQLMoviesOnlineService",
						"type": "DatasetReference"
					},
					"name": "tOnlineService"
				},
				{
					"dataset": {
						"referenceName": "MentoringSQLDataMartDimOnlineService",
						"type": "DatasetReference"
					},
					"name": "DimOnlineServiceSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "MentoringSQLDataMartDimMovie",
						"type": "DatasetReference"
					},
					"name": "DimMovie"
				},
				{
					"dataset": {
						"referenceName": "MentoringSQLDataMartDimOnlineService",
						"type": "DatasetReference"
					},
					"name": "DimOnlineService"
				}
			],
			"transformations": [
				{
					"name": "MoviesLeftStatus",
					"description": "Left join on 'tMovies' and 'tStatus'"
				},
				{
					"name": "CreateModifyColumns",
					"description": "Adding CreatedDate and ModifiedDate"
				},
				{
					"name": "AddCreateModified",
					"description": "Adding CreatedDate and ModifiedDate"
				},
				{
					"name": "UpdateRows"
				},
				{
					"name": "lookupDim"
				},
				{
					"name": "FilterInsertsUpdates"
				}
			],
			"scriptLines": [
				"source(output(",
				"          MovieId as integer,",
				"          MovieIdNK as integer,",
				"          Budget as integer,",
				"          HomepagePath as string,",
				"          Title as string,",
				"          OriginalTitle as string,",
				"          ReleaseDate as date,",
				"          Revenue as long,",
				"          Runtime as integer,",
				"          MovieStatusId as integer,",
				"          AvgVote as decimal(3,1),",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp,",
				"          SrcFileName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tMovies",
				"source(output(",
				"          MovieStatusId as integer,",
				"          MovieStatusName as string,",
				"          CreatedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tStatus",
				"source(output(",
				"          ServiceId as integer,",
				"          ServiceCode as string,",
				"          ServiceName as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tOnlineService",
				"source(output(",
				"          ServiceKey as integer,",
				"          ServiceCode as string,",
				"          ServiceName as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimOnlineServiceSource",
				"tMovies, tStatus join(tMovies@MovieStatusId == tStatus@MovieStatusId,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> MoviesLeftStatus",
				"MoviesLeftStatus derive(CreatedDate = currentUTC(),",
				"          ModifiedDate = currentUTC()) ~> CreateModifyColumns",
				"lookupDim derive(CreatedDateTemp = iif(isNull(DimOnlineServiceSource@CreatedDate) , currentUTC(), DimOnlineServiceSource@CreatedDate),",
				"          ModifiedDateTemp = currentUTC()) ~> AddCreateModified",
				"FilterInsertsUpdates alterRow(upsertIf(tOnlineService@ModifiedDate>coalesce(DimOnlineServiceSource@ModifiedDate,toDate('1801-01-01')))) ~> UpdateRows",
				"tOnlineService, DimOnlineServiceSource lookup(tOnlineService@ServiceCode == DimOnlineServiceSource@ServiceCode,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupDim",
				"AddCreateModified filter(or(tOnlineService@ModifiedDate>DimOnlineServiceSource@ModifiedDate, isNull(DimOnlineServiceSource@ServiceCode))) ~> FilterInsertsUpdates",
				"CreateModifyColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          MovieKey as integer,",
				"          MovieIdNK as integer,",
				"          Title as string,",
				"          ReleaseDate as date,",
				"          Runtime as integer,",
				"          MovieStatus as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          MovieIdNK,",
				"          Title,",
				"          ReleaseDate,",
				"          Runtime,",
				"          MovieStatus = MovieStatusName,",
				"          CreatedDate,",
				"          ModifiedDate",
				"     )) ~> DimMovie",
				"UpdateRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ServiceKey as integer,",
				"          ServiceCode as string,",
				"          ServiceName as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['ServiceCode'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ServiceCode = tOnlineService@ServiceCode,",
				"          ServiceName = tOnlineService@ServiceName,",
				"          CreatedDate = CreatedDateTemp,",
				"          ModifiedDate = ModifiedDateTemp",
				"     )) ~> DimOnlineService"
			]
		}
	}
}